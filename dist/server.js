(()=>{var __webpack_modules__={681:()=>{eval('\n;// external "dotenv"\nconst external_dotenv_namespaceObject = require("dotenv");\n;// external "express"\nconst external_express_namespaceObject = require("express");\n;// external "express-handlebars"\nconst external_express_handlebars_namespaceObject = require("express-handlebars");\n;// ./src/services/helpers/help.js\nfunction calc(value) {\n  return value + 7;\n}\nfunction list(value, name, options) {\n  return "<h3>" + options.fn({\n    test: value,\n    test1: name,\n    label: "custom Helper List"\n  });\n}\nfunction IsEq(v1, v2, options) {\n  if (v1 === v2) {\n    return options.fn(this);\n  }\n  return options.inverse(this);\n}\nfunction BiggerThan(v1, options) {\n  if (v1.length > 0) {\n    return options.fn(this);\n  }\n  return options.inverse(this);\n}\nfunction LessThan(v1, options) {\n  if (v1.length <= 0) {\n    return options.fn(this);\n  }\n  return options.inverse(this);\n}\nfunction Inc(v1, options) {\n  return parseInt(v1) + 1;\n}\nfunction Json(v1, options) {\n  return JSON.stringify(v1);\n}\n;// ./src/services/pages/home.js\nvar HomePage = function HomePage(req, res) {\n  res.render(\'pages/home.hbs\', {\n    sitename: \'Artıdoksan\',\n    page: \'Home\',\n    title: \'HomePage\',\n    url: "https://artidoksancert.com",\n    siteurl: "https://artidoksancert.com",\n    publicdata: \'home\'\n  });\n};\n;// ./src/services/pages/hakkimizda.js\nvar HakkimizdaPage = function HakkimizdaPage(req, res) {\n  res.render(\'pages/kurumsal/hakkimizda.hbs\', {\n    sitename: \'Artıdoksan\',\n    page: \'Hakkımızda\',\n    title: \'HakkımızdaPage\',\n    url: "https://artidoksancert.com/hakkimizda",\n    siteurl: "https://artidoksancert.com/hakkimizda",\n    publicdata: \'/hakkimizda\'\n  });\n};\n;// ./src/services/pages/sistem.js\nvar ISO9001Page = function ISO9001Page(req, res) {\n  res.render(\'pages/sistem/iso9001.hbs\', {\n    sitename: \'Artıdoksan\',\n    page: \'Sistem Belgelendirme\',\n    title: \'Sistem Belgelendirme | ISO 9001 Kalite Yönetim Sistemi\',\n    url: "https://artidoksancert.com/sistem-belgelendirme/iso9001",\n    siteurl: "https://artidoksancert.com/sistem-belgelendirme/iso9001",\n    publicdata: \'/sistem/iso9001\',\n    layout: \'sistem\'\n  });\n};\nvar ISO14001Page = function ISO14001Page(req, res) {\n  res.render(\'pages/sistem/iso14001.hbs\', {\n    sitename: \'Artıdoksan\',\n    page: \'Sistem Belgelendirme\',\n    title: \'Sistem Belgelendirme | ISO 14001 Çevre Yönetim Sistemi\',\n    url: "https://artidoksancert.com/sistem-belgelendirme/iso14001",\n    siteurl: "https://artidoksancert.com/sistem-belgelendirme/iso14001",\n    publicdata: \'/sistem/iso14001\',\n    layout: \'sistem\'\n  });\n};\nvar ISO22000Page = function ISO22000Page(req, res) {\n  res.render(\'pages/sistem/iso22000.hbs\', {\n    sitename: \'Artıdoksan\',\n    page: \'Sistem Belgelendirme\',\n    title: \'Sistem Belgelendirme | ISO 22000 Gıda Güvenliği Yönetim Sistemi\',\n    url: "https://artidoksancert.com/sistem-belgelendirme/iso22000",\n    siteurl: "https://artidoksancert.com/sistem-belgelendirme/iso22000",\n    publicdata: \'/sistem/iso22000\',\n    layout: \'sistem\'\n  });\n};\nvar ISO27001Page = function ISO27001Page(req, res) {\n  res.render(\'pages/sistem/iso27001.hbs\', {\n    sitename: \'Artıdoksan\',\n    page: \'Sistem Belgelendirme\',\n    title: \'Sistem Belgelendirme | ISO 27001 Bilgi Güvenliği Yönetim Sistemi\',\n    url: "https://artidoksancert.com/sistem-belgelendirme/iso27001",\n    siteurl: "https://artidoksancert.com/sistem-belgelendirme/iso27001",\n    publicdata: \'/sistem/iso27001\',\n    layout: \'sistem\'\n  });\n};\nvar ISO45001Page = function ISO45001Page(req, res) {\n  res.render(\'pages/sistem/iso45001.hbs\', {\n    sitename: \'Artıdoksan\',\n    page: \'Sistem Belgelendirme\',\n    title: \'Sistem Belgelendirme | ISO 45001 İş Sağlığı ve Güvenliği Yönetim Sistemi\',\n    url: "https://artidoksancert.com/sistem-belgelendirme/iso45001",\n    siteurl: "https://artidoksancert.com/sistem-belgelendirme/iso45001",\n    publicdata: \'/sistem/iso45001\',\n    layout: \'sistem\'\n  });\n};\nvar ISO13485Page = function ISO13485Page(req, res) {\n  res.render(\'pages/sistem/iso13485.hbs\', {\n    sitename: \'Artıdoksan\',\n    page: \'Sistem Belgelendirme\',\n    title: \'Sistem Belgelendirme | ISO 13485 Tıbbi Cihazlar için Yönetim Sistemi\',\n    url: "https://artidoksancert.com/sistem-belgelendirme/iso13485",\n    siteurl: "https://artidoksancert.com/sistem-belgelendirme/iso13485",\n    publicdata: \'/sistem/iso13485\',\n    layout: \'sistem\'\n  });\n};\nvar ISO10002Page = function ISO10002Page(req, res) {\n  res.render(\'pages/sistem/iso10002.hbs\', {\n    sitename: \'Artıdoksan\',\n    page: \'Sistem Belgelendirme\',\n    title: \'Sistem Belgelendirme | ISO 10002 Müşteri Memnuniyeti Yönetim Sistemi\',\n    url: "https://artidoksancert.com/sistem-belgelendirme/iso10002",\n    siteurl: "https://artidoksancert.com/sistem-belgelendirme/iso10002",\n    publicdata: \'/sistem/iso10002\',\n    layout: \'sistem\'\n  });\n};\nvar ISO50001Page = function ISO50001Page(req, res) {\n  res.render(\'pages/sistem/iso50001.hbs\', {\n    sitename: \'Artıdoksan\',\n    page: \'Sistem Belgelendirme\',\n    title: \'Sistem Belgelendirme | ISO 50001 Enerji Yönetim Sistemi\',\n    url: "https://artidoksancert.com/sistem-belgelendirme/iso50001",\n    siteurl: "https://artidoksancert.com/sistem-belgelendirme/iso50001",\n    publicdata: \'/sistem/iso50001\',\n    layout: \'sistem\'\n  });\n};\n;// ./src/services/pages/urun.js\nvar LiftPage = function LiftPage(req, res) {\n  res.render("pages/urun/lift.hbs", {\n    sitename: "Artıdoksan",\n    page: "Ürün Belgelendirme",\n    title: "Ürün Belgelendirme | Asansör Yönetmeliği",\n    url: "https://artidoksancert.com/urun-belgelendirme/lift",\n    siteurl: "https://artidoksancert.com/urun-belgelendirme/lift",\n    publicdata: "/urun/lift",\n    layout: "urun"\n  });\n};\nvar MachineryPage = function MachineryPage(req, res) {\n  res.render("pages/urun/machinery.hbs", {\n    sitename: "Artıdoksan",\n    page: "Ürün Belgelendirme",\n    title: "Ürün Belgelendirme | Makine Emniyet Yönetmeliği",\n    url: "https://artidoksancert.com/urun-belgelendirme/machinery",\n    siteurl: "https://artidoksancert.com/urun-belgelendirme/machinery",\n    publicdata: "/urun/machinery",\n    layout: "urun"\n  });\n};\n;// ./src/services/pages/asansor.js\nvar AsansorCEPage = function AsansorCEPage(req, res) {\n  res.render("pages/asansor/ce.hbs", {\n    sitename: "Artıdoksan",\n    page: "Asansör CE",\n    title: "Asansör CE Page",\n    url: "https://artidoksancert.com/asansor/ce",\n    siteurl: "https://artidoksancert.com/asansor/ce",\n    publicdata: "/asansor/ce",\n    layout: "asansor"\n  });\n};\nvar IkinciTarafDenetimPage = function IkinciTarafDenetimPage(req, res) {\n  res.render("pages/asansor/2-taraf-denetim.hbs", {\n    sitename: "Artıdoksan",\n    page: "Asansör 2.Taraf Deentim",\n    title: "Asansör 2.Taraf Deentim Page",\n    url: "https://artidoksancert.com/asansor/2-taraf-denetim",\n    siteurl: "https://artidoksancert.com/asansor/2-taraf-denetim",\n    publicdata: "/asansor/2-taraf-denetim",\n    layout: "asansor"\n  });\n};\nvar PeriyodikOlmayanPage = function PeriyodikOlmayanPage(req, res) {\n  res.render("pages/asansor/periyodik-olmayan.hbs", {\n    sitename: "Artıdoksan",\n    page: "Asansör Periyodk Olmayan Denetim",\n    title: "Asansör Periyodk Olmayan Denetim Page",\n    url: "https://artidoksancert.com/asansor/periyodik-olmayan-denetim",\n    siteurl: "https://artidoksancert.com/asansor/periyodik-olmayan-denetim",\n    publicdata: "/asansor/periyodik-olmayan",\n    layout: "asansor"\n  });\n};\n;// ./src/services/pages/ctrl-panel/auth.js\nfunction _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }\nfunction _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\nvar GetUser = function GetUser(req, res, next) {\n  if (!!req.user) {\n    return res.json(_objectSpread({}, req.user));\n  }\n  return res.json(null);\n};\nvar checkLoggedIn = function checkLoggedIn(req, res, next) {\n  console.log("isAuth", req.isAuthenticated());\n  if (!req.isAuthenticated()) {\n    return res.redirect("/ctrl-panel/login");\n  }\n  // if (!!req.user && req.user.role !== "ctrl-admin") {\n  //   return res.redirect("");\n  // }\n\n  next();\n};\nvar checkLoggedOut = function checkLoggedOut(req, res, next) {\n  if (req.isAuthenticated()) {\n    return res.redirect("/ctrl-panel");\n  }\n  next();\n};\nvar postLogOut = function postLogOut(req, res) {\n  req.session.destroy(function (err) {\n    // return res.redirect("/login");\n    return res.json({\n      ok: true\n    });\n  });\n};\n;// ./src/services/pages/ctrl-panel/recaptchaCtrl.js\nfunction recaptchaCtrl_typeof(o) { "@babel/helpers - typeof"; return recaptchaCtrl_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, recaptchaCtrl_typeof(o); }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == recaptchaCtrl_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(recaptchaCtrl_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction recaptchaCtrl_ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction recaptchaCtrl_objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? recaptchaCtrl_ownKeys(Object(t), !0).forEach(function (r) { recaptchaCtrl_defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : recaptchaCtrl_ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction recaptchaCtrl_defineProperty(e, r, t) { return (r = recaptchaCtrl_toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction recaptchaCtrl_toPropertyKey(t) { var i = recaptchaCtrl_toPrimitive(t, "string"); return "symbol" == recaptchaCtrl_typeof(i) ? i : i + ""; }\nfunction recaptchaCtrl_toPrimitive(t, r) { if ("object" != recaptchaCtrl_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != recaptchaCtrl_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\nvar Recaptha = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(req, res, next) {\n    var data, url, response, google_response, passedData;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          data = req.body;\n          if (data.recaptchaToken) {\n            _context.next = 3;\n            break;\n          }\n          return _context.abrupt("return", res.json({\n            type: "error",\n            msg: "RecaptchaToken Not Found"\n          }));\n        case 3:\n          url = "https://www.google.com/recaptcha/api/siteverify?secret=".concat(process.env.RECAPTCHA_SECRET_KEY, "&response=").concat(data.recaptchaToken);\n          _context.prev = 4;\n          _context.next = 7;\n          return fetch(url, {\n            method: "post"\n          });\n        case 7:\n          response = _context.sent;\n          _context.next = 10;\n          return response.json();\n        case 10:\n          google_response = _context.sent;\n          delete data.recaptchaToken;\n          passedData = recaptchaCtrl_objectSpread(recaptchaCtrl_objectSpread({}, data), {}, {\n            google_score: google_response\n          }); //Burda Şart koyulup ona göre yönlendirme yapılmalı\n          delete data.google_score;\n          // console.log(\'recaptcha passedData\',passedData)\n          _context.next = 19;\n          break;\n        case 16:\n          _context.prev = 16;\n          _context.t0 = _context["catch"](4);\n          return _context.abrupt("return", res.json({\n            type: "error",\n            msg: "Recaptcha Post Error"\n          }));\n        case 19:\n          next();\n        case 20:\n        case "end":\n          return _context.stop();\n      }\n    }, _callee, null, [[4, 16]]);\n  }));\n  return function Recaptha(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n;// external "passport-local"\nconst external_passport_local_namespaceObject = require("passport-local");\n;// external "passport"\nconst external_passport_namespaceObject = require("passport");\n;// external "bcryptjs"\nconst external_bcryptjs_namespaceObject = require("bcryptjs");\n;// external "mysql"\nconst external_mysql_namespaceObject = require("mysql");\n;// ./src/services/mysql.js\nfunction mysql_typeof(o) { "@babel/helpers - typeof"; return mysql_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, mysql_typeof(o); }\nfunction mysql_defineProperty(e, r, t) { return (r = mysql_toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction mysql_toPropertyKey(t) { var i = mysql_toPrimitive(t, "string"); return "symbol" == mysql_typeof(i) ? i : i + ""; }\nfunction mysql_toPrimitive(t, r) { if ("object" != mysql_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != mysql_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\n\n\n(0,external_dotenv_namespaceObject.config)({\n  path: ["const.env"]\n});\nvar dbConfig = mysql_defineProperty(mysql_defineProperty(mysql_defineProperty({\n  connectionLimit: 10,\n  // default 10\n  host: process.env.MYSQL_DB_HOST,\n  user: process.env.MYSQL_DB_USERNAME,\n  password: process.env.MYSQL_DB_PASSWORD,\n  database: process.env.MYSQL_DB_NAME\n}, "connectionLimit", 20), "idleTimeoutMillis", 30000), "connectionTimeoutMillis", 2000);\nvar pool = external_mysql_namespaceObject.createPool(dbConfig);\nvar Connection = function Connection() {\n  return new Promise(function (resolve, reject) {\n    pool.getConnection(function (err, connection) {\n      if (err) reject(err);\n      console.log("MySQL pool connected: threadId " + connection.threadId);\n      var query = function query(sql, binding) {\n        return new Promise(function (resolve, reject) {\n          connection.query(sql, binding, function (err, result) {\n            if (err) reject(err);\n            resolve(result);\n          });\n        });\n      };\n      var release = function release() {\n        return new Promise(function (resolve, reject) {\n          if (err) reject(err);\n          console.log("MySQL pool released: threadId " + connection.threadId);\n          resolve(connection.release());\n        });\n      };\n      resolve({\n        query: query,\n        release: release\n      });\n    });\n  });\n};\nvar Query = function Query(sql, binding) {\n  return new Promise(function (resolve, reject) {\n    pool.query(sql, binding, function (err, result, fields) {\n      if (err) reject(err);\n      resolve(result);\n    });\n  });\n};\nvar dbConfigGenel = mysql_defineProperty(mysql_defineProperty(mysql_defineProperty({\n  connectionLimit: 10,\n  // default 10\n  host: process.env.MYSQL_GeneralDB_HOST,\n  user: process.env.MYSQL_DB_USERNAME,\n  password: process.env.MYSQL_DB_PASSWORD,\n  database: process.env.MYSQL_GeneralDB_NAME\n}, "connectionLimit", 20), "idleTimeoutMillis", 30000), "connectionTimeoutMillis", 2000);\nvar poolGeneral = external_mysql_namespaceObject.createPool(dbConfigGenel);\nvar ConnectionGeneral = function ConnectionGeneral() {\n  return new Promise(function (resolve, reject) {\n    poolGeneral.getConnection(function (err, connection) {\n      if (err) reject(err);\n      console.log("MySQL pool connected: threadId " + connection.threadId);\n      var query = function query(sql, binding) {\n        return new Promise(function (resolve, reject) {\n          connection.query(sql, binding, function (err, result) {\n            if (err) reject(err);\n            resolve(result);\n          });\n        });\n      };\n      var release = function release() {\n        return new Promise(function (resolve, reject) {\n          if (err) reject(err);\n          console.log("MySQL pool released: threadId " + connection.threadId);\n          resolve(connection.release());\n        });\n      };\n      resolve({\n        query: query,\n        release: release\n      });\n    });\n  });\n};\nvar QueryGeneral = function QueryGeneral(sql, binding) {\n  return new Promise(function (resolve, reject) {\n    poolGeneral.query(sql, binding, function (err, result, fields) {\n      if (err) reject(err);\n      resolve(result);\n    });\n  });\n};\n;// ./src/services/pages/ctrl-panel/user_db.js\nfunction user_db_typeof(o) { "@babel/helpers - typeof"; return user_db_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, user_db_typeof(o); }\nfunction user_db_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ user_db_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == user_db_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(user_db_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction user_db_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction user_db_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { user_db_asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { user_db_asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\n\n\nvar handleLogin = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {\n  var _ref = user_db_asyncToGenerator(/*#__PURE__*/user_db_regeneratorRuntime().mark(function _callee(email, passw) {\n    var user, isMatch;\n    return user_db_regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return findUserByEmail(email);\n        case 2:\n          user = _context.sent;\n          _context.next = 5;\n          return compare(passw, user.passw);\n        case 5:\n          isMatch = _context.sent;\n          if (!isMatch) {\n            _context.next = 8;\n            break;\n          }\n          return _context.abrupt("return", isMatch);\n        case 8:\n          return _context.abrupt("return", "The password that you\'ve entered is incorrect");\n        case 9:\n        case "end":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function handleLogin(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}()));\nvar findUserByEmail = /*#__PURE__*/function () {\n  var _ref2 = user_db_asyncToGenerator(/*#__PURE__*/user_db_regeneratorRuntime().mark(function _callee2(email) {\n    var rows;\n    return user_db_regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return Query("SELECT * FROM `users` WHERE `email` = ? ", email);\n        case 3:\n          rows = _context2.sent;\n          return _context2.abrupt("return", rows[0]);\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2["catch"](0);\n          console.log(_context2.t0);\n          return _context2.abrupt("return", false);\n        case 11:\n        case "end":\n          return _context2.stop();\n      }\n    }, _callee2, null, [[0, 7]]);\n  }));\n  return function findUserByEmail(_x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nvar findUserById = /*#__PURE__*/function () {\n  var _ref3 = user_db_asyncToGenerator(/*#__PURE__*/user_db_regeneratorRuntime().mark(function _callee3(id) {\n    var rows;\n    return user_db_regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return Query("SELECT * FROM `users` WHERE `id` = ? ", id);\n        case 3:\n          rows = _context3.sent;\n          return _context3.abrupt("return", rows[0]);\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3["catch"](0);\n          console.log(_context3.t0);\n          return _context3.abrupt("return", false);\n        case 11:\n        case "end":\n          return _context3.stop();\n      }\n    }, _callee3, null, [[0, 7]]);\n  }));\n  return function findUserById(_x4) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nvar comparePassword = function comparePassword(passw, userObject) {\n  return new Promise(/*#__PURE__*/function () {\n    var _ref4 = user_db_asyncToGenerator(/*#__PURE__*/user_db_regeneratorRuntime().mark(function _callee4(resolve, reject) {\n      return user_db_regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            _context4.next = 3;\n            return (0,external_bcryptjs_namespaceObject.compare)(passw, userObject.passw).then(function (isMatch) {\n              if (isMatch) {\n                resolve(true);\n              } else {\n                resolve("The password that you\'ve entered is incorrect");\n              }\n            });\n          case 3:\n            _context4.next = 8;\n            break;\n          case 5:\n            _context4.prev = 5;\n            _context4.t0 = _context4["catch"](0);\n            reject(_context4.t0);\n          case 8:\n          case "end":\n            return _context4.stop();\n        }\n      }, _callee4, null, [[0, 5]]);\n    }));\n    return function (_x5, _x6) {\n      return _ref4.apply(this, arguments);\n    };\n  }());\n};\n;// ./src/services/pages/ctrl-panel/passportCtrl.js\nfunction passportCtrl_typeof(o) { "@babel/helpers - typeof"; return passportCtrl_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, passportCtrl_typeof(o); }\nfunction passportCtrl_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ passportCtrl_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == passportCtrl_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(passportCtrl_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction passportCtrl_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction passportCtrl_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { passportCtrl_asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { passportCtrl_asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\n\n\n\nvar LocalStrategy = external_passport_local_namespaceObject.Strategy;\nvar Authenticate = function Authenticate(req, res, next) {\n  external_passport_namespaceObject.authenticate("local", function (err, user, info) {\n    switch (req.accepts("html", "json")) {\n      case "html":\n        if (err) {\n          return next(err);\n        }\n        if (!user) {\n          return res.redirect("/ctrl-panel/login");\n        }\n        req.logIn(user, function (err) {\n          if (err) {\n            return next(err);\n          }\n          return res.redirect("/ctrl-panel/");\n        });\n        break;\n      case "json":\n        if (err) {\n          return next(err);\n        }\n        if (!user) {\n          console.log("Kullunıcı bulunamadı");\n          return res.status(401).json({\n            ok: false,\n            msg: "Kullunıcı bulunamadı"\n          });\n        }\n        req.logIn(user, function (err) {\n          if (err) {\n            return res.status(401).json({\n              ok: false,\n              msg: "Email veya şifre hatalı"\n            });\n          }\n          return res.json({\n            ok: true\n          });\n        });\n        break;\n      default:\n        res.status(406).json();\n    }\n  })(req, res, next);\n};\nvar initPassportLocal = function initPassportLocal() {\n  external_passport_namespaceObject.use(new LocalStrategy({\n    usernameField: "email",\n    passwordField: "passw",\n    passReqToCallback: true\n  }, /*#__PURE__*/function () {\n    var _ref = passportCtrl_asyncToGenerator(/*#__PURE__*/passportCtrl_regeneratorRuntime().mark(function _callee2(req, email, passw, done) {\n      return passportCtrl_regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return findUserByEmail(email).then(/*#__PURE__*/function () {\n              var _ref2 = passportCtrl_asyncToGenerator(/*#__PURE__*/passportCtrl_regeneratorRuntime().mark(function _callee(user) {\n                var match;\n                return passportCtrl_regeneratorRuntime().wrap(function _callee$(_context) {\n                  while (1) switch (_context.prev = _context.next) {\n                    case 0:\n                      if (user) {\n                        _context.next = 2;\n                        break;\n                      }\n                      return _context.abrupt("return", done(null, false, req.flash("errors", "This user email \\"".concat(email, "\\" doesn\'t exist"))));\n                    case 2:\n                      if (!user) {\n                        _context.next = 11;\n                        break;\n                      }\n                      _context.next = 5;\n                      return comparePassword(passw, user);\n                    case 5:\n                      match = _context.sent;\n                      if (!(match === true)) {\n                        _context.next = 10;\n                        break;\n                      }\n                      return _context.abrupt("return", done(null, user, null));\n                    case 10:\n                      return _context.abrupt("return", done(null, false, req.flash("errors", match)));\n                    case 11:\n                    case "end":\n                      return _context.stop();\n                  }\n                }, _callee);\n              }));\n              return function (_x5) {\n                return _ref2.apply(this, arguments);\n              };\n            }());\n          case 3:\n            _context2.next = 9;\n            break;\n          case 5:\n            _context2.prev = 5;\n            _context2.t0 = _context2["catch"](0);\n            console.log(_context2.t0);\n            return _context2.abrupt("return", done(null, false, {\n              message: _context2.t0\n            }));\n          case 9:\n          case "end":\n            return _context2.stop();\n        }\n      }, _callee2, null, [[0, 5]]);\n    }));\n    return function (_x, _x2, _x3, _x4) {\n      return _ref.apply(this, arguments);\n    };\n  }()));\n};\nexternal_passport_namespaceObject.serializeUser(function (user, done) {\n  done(null, user.id);\n});\nexternal_passport_namespaceObject.deserializeUser(function (id, done) {\n  findUserById(id).then(function (user) {\n    return done(null, user);\n  })["catch"](function (error) {\n    return done(error, null);\n  });\n});\n;// ./src/services/pages/ctrl-panel/main.js\nfunction main_typeof(o) { "@babel/helpers - typeof"; return main_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, main_typeof(o); }\nfunction main_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ main_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == main_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(main_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction main_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction main_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { main_asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { main_asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\n\n\n\nvar CtrlPanelRoutes = function CtrlPanelRoutes(root, router) {\n  router.post("".concat(root, "/logout"), postLogOut);\n  router.post("".concat(root, "/login"), Recaptha, Authenticate);\n  router.post("".concat(root, "/get-user"), GetUser);\n  router.get("".concat(root, "/login"), checkLoggedOut, /*#__PURE__*/function () {\n    var _ref = main_asyncToGenerator(/*#__PURE__*/main_regeneratorRuntime().mark(function _callee(req, res) {\n      return main_regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            res.render("pages/ctrl-panel/login.hbs", {\n              sitename: "Login | Artıdoksan",\n              page: "Login | Artıdoksan",\n              title: "Login | Artıdoksan Page",\n              url: "https://artidoksancert.com/ctrl-panel/login",\n              siteurl: "https://artidoksancert.com/ctrl-panel/login",\n              publicdata: "/ctrl-panel/main",\n              layout: "ctrl-panel"\n            });\n          case 1:\n          case "end":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n  router.get("".concat(root, "/*"), checkLoggedIn, /*#__PURE__*/function () {\n    var _ref2 = main_asyncToGenerator(/*#__PURE__*/main_regeneratorRuntime().mark(function _callee2(req, res) {\n      return main_regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            res.render("pages/ctrl-panel/main.hbs", {\n              sitename: "Ctrlpanel | Artıdoksan",\n              page: "Ctrlpanel | Artıdoksan",\n              title: "Ctrlpanel | Artıdoksan Page",\n              url: "https://artidoksancert.com/ctrl-panel/",\n              siteurl: "https://artidoksancert.com/ctrl-panel/",\n              publicdata: "/ctrl-panel/main",\n              layout: "ctrl-panel"\n            });\n          case 1:\n          case "end":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n    return function (_x3, _x4) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n  // router.get("/register", RegisterPage);\n  // router.post("/register", Recaptha, validateRegister, CreateNewUser);\n};\n;// ./src/services/ssl.js\nvar SslStatus = function SslStatus(req, res) {\n  res.sendFile("".concat(process.cwd(), "/sources/8EF0E148BC848A44E6EAFE8F9FADF56F.txt"));\n};\n;// ./src/services/main.js\nfunction services_main_typeof(o) { "@babel/helpers - typeof"; return services_main_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, services_main_typeof(o); }\nfunction services_main_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ services_main_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == services_main_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(services_main_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction services_main_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction services_main_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { services_main_asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { services_main_asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\n\n\n\n\n\n\n\nvar router = external_express_namespaceObject.Router({\n  mergeParams: true\n});\n\n\ninitPassportLocal();\nvar appRoutes = function appRoutes(app) {\n  router.get("/", HomePage);\n  router.get("/hakkimizda", HakkimizdaPage);\n  router.get("/sistem-belgelendirme", function (req, res) {\n    return res.redirect("/sistem-belgelendirme/iso9001");\n  });\n  router.get("/sistem-belgelendirme/iso9001", ISO9001Page);\n  router.get("/sistem-belgelendirme/iso14001", ISO14001Page);\n  router.get("/sistem-belgelendirme/iso22000", ISO22000Page);\n  router.get("/sistem-belgelendirme/iso27001", ISO27001Page);\n  router.get("/sistem-belgelendirme/iso45001", ISO45001Page);\n  router.get("/sistem-belgelendirme/iso13485", ISO13485Page);\n  router.get("/sistem-belgelendirme/iso10002", ISO10002Page);\n  router.get("/sistem-belgelendirme/iso50001", ISO50001Page);\n  router.get("/urun-belgelendirme", function (req, res) {\n    return res.redirect("/urun-belgelendirme/lift");\n  });\n  router.get("/urun-belgelendirme/lift", LiftPage);\n  router.get("/urun-belgelendirme/machinery", MachineryPage);\n  router.get("/asansor/ce", AsansorCEPage);\n  router.get("/asansor/2-taraf-denetim", IkinciTarafDenetimPage);\n  router.get("/asansor/periyodik-olmayan-denetim", PeriyodikOlmayanPage);\n  router.get("/.well-known/pki-validation/8EF0E148BC848A44E6EAFE8F9FADF56F.txt", SslStatus);\n  router.get("/sitemap", /*#__PURE__*/function () {\n    var _ref = services_main_asyncToGenerator(/*#__PURE__*/services_main_regeneratorRuntime().mark(function _callee(req, res) {\n      var lastmod, sitemapIcerik;\n      return services_main_regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            lastmod = new Date(2025, 1, 8, 15, 12, 55).toISOString();\n            sitemapIcerik = "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" ?>\\n    <urlset xmlns=\\"http://www.sitemaps.org/schemas/sitemap/0.9\\" \\n        xmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\" \\n        xsi:schemaLocation=\\"http://www.sitemaps.org/schemas/sitemap/0.9\\n                http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd\\">\\n\\n        <url>\\n            <loc>https://betciksguncel.org</loc>\\n            <lastmod>".concat(lastmod, "</lastmod>\\n            <changefreq>hourly</changefreq>\\n            <priority>1.0</priority>\\n        </url>\\n\\n\\n    </urlset>"); // res.set("Content-Type", "text/xml; charset=utf-8");//\'application/xml\'\n            res.setHeader("content-type", "text/xml");\n            res.status(200).send(sitemapIcerik);\n          case 4:\n          case "end":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n  CtrlPanelRoutes("/ctrl-panel", router);\n  return app.use("/", router);\n};\n;// external "body-parser"\nconst external_body_parser_namespaceObject = require("body-parser");\n;// external "method-override"\nconst external_method_override_namespaceObject = require("method-override");\n;// external "cookie-parser"\nconst external_cookie_parser_namespaceObject = require("cookie-parser");\n;// external "express-session"\nconst external_express_session_namespaceObject = require("express-session");\n;// external "connect-flash"\nconst external_connect_flash_namespaceObject = require("connect-flash");\n;// external "compression"\nconst external_compression_namespaceObject = require("compression");\n;// ./src/server.js\n\n(0,external_dotenv_namespaceObject.config)({\n  path: ["const.env"]\n});\n\n\n\n\n\n\n\n\n\n\n\nvar app = external_express_namespaceObject();\nvar PORT = process.env.PORT || 3000;\n//only development mode\nif (false) { var liveReloadServer, connectLiveReload, livereload; } else {\n  app.use(external_compression_namespaceObject());\n}\napp.use(external_cookie_parser_namespaceObject(\'secret\'));\napp.use(external_express_session_namespaceObject({\n  secret: \'secret\',\n  resave: true,\n  saveUninitialized: false,\n  cookie: {\n    maxAge: 1000 * 60 * 60 * 24 // 86400000 1 day\n  }\n}));\napp.engine(".hbs", (0,external_express_handlebars_namespaceObject.engine)({\n  defaultLayout: "main",\n  extname: ".hbs",\n  layoutsDir: "views/layouts",\n  partialsDir: "views/partials",\n  helpers: {\n    calc: calc,\n    list: list,\n    IsEq: IsEq,\n    BiggerThan: BiggerThan,\n    LessThan: LessThan,\n    Inc: Inc,\n    Json: Json\n  }\n}));\napp.set("view engine", ".hbs");\napp.set("views", "".concat(process.cwd(), "/views"));\napp.use(external_express_namespaceObject["static"]("public"));\napp.use(external_body_parser_namespaceObject.urlencoded({\n  extended: true\n}));\napp.use(external_body_parser_namespaceObject.json());\napp.use(external_method_override_namespaceObject("_method"));\n//Enable flash message\napp.use(external_connect_flash_namespaceObject());\n//Config passport middleware\napp.use(external_passport_namespaceObject.initialize());\napp.use(external_passport_namespaceObject.session());\nappRoutes(app);\napp.all("**", function (req, res) {\n  res.render("pages/404.hbs");\n});\n\n//****************************************/\napp.listen(PORT, function () {\n  console.log("Server is starting at ".concat(PORT));\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///681\n')}},__webpack_exports__={};__webpack_modules__[681]()})();